let unit = false in

let prev = cell 0 in

let a = 8121 in
let c = 28411 in

let getModulus = rec f. λnumber. λdivider.
	if divider <= number
	then
		f (number - divider) divider
	else number
in

let generateRandomNumber = λmax.
	let prevValue = peek prev in
	let prevValue = getModulus (a * prevValue + c) max in
	let _ = set prev to (cell prevValue) in
	let _ = step in
	prevValue
in

let generateRandomFloat = λmax.
  let value1 = (generateRandomNumber max) / max in
  let value2 = (generateRandomNumber max) / max in
  value1/value2 * max/2
in

let generateRandomBool = λ_.
    generateRandomNumber 100 <= 50
in

let pair = λx.λy.λp. p x y in
let fst = λp.p (λx.λy.x) in
let snd = λp.p (λx.λy.y) in

let nil = pair true true in
let isnil = fst in
let cons = λh.λt. pair false (pair h t) in
let head = λz. fst (snd z) in
let tail = λz. snd (snd z) in

let make = rec f. λlen. λval.
    if len <= 0 && 0 <= len 
    then 
        nil
    else
        cons val (f (len - 1) val)
in

let append = rec f. λv1. λv2.
    if isnil v1
    then
        v2
    else
        if isnil v2
        then
            v1
        else
            let hd = head v1 in
            let tl = tail v1 in
            cons hd (f tl v2)
in

let getNth =  λn. λx.
	let aux = rec g. λi. λx.
		if i <= n && n <= i 
		then 
			head x
		else
			g (i + 1) (tail x)
	in
	aux 0  x
in

let setNth =  λn. λx. λval.
	let aux = rec g. λi. λx.
		if i <= n && n <= i 
		then 
			cons val (tail x)
		else
			cons (head x) (g (i + 1) (tail x))
	in
	aux 0 x
in

let length = λx.
	let aux = rec g. λacc. λx.
		if isnil x
		then 
			acc
		else
			g (acc + 1) (tail x)
	in aux 0 x
in

let for_loop = λtotal_step.
	let aux = rec f. λi.
		if (i <= total_step + 1 && total_step + 1 <= i)
		then 
			unit 
		else 
			let _ = step in 
			f (i + 1)
	in
	aux 1
in

let foldl = rec g. λf. λacc. λx.
  if isnil x 
  then
    acc
  else
    g f (f acc (head x)) (tail x)
in

let map = λf. λx.
    let aux = rec g. λx.
        if isnil x 
        then
            nil
        else
            cons (f (head x)) (g (tail x))
    in aux x
in

let mapi = λf. λx.
    let aux = rec g. λi. λx.
        if isnil x 
        then
            nil
        else
            cons (f i (head x)) (g (i + 1) (tail x))
    in aux 0 x
in

let map2 = λf. λx. λy.
    let aux =  rec g. λx. λy.
        if (isnil x) && (isnil y)
        then
            nil
        else
            cons (f (head x) (head y)) (g (tail x) (tail y))
    in aux x y
in

let filter = λf. λx. 
    let aux = rec g. λy.
        if isnil y
        then
            nil
        else
            let hd = head y in
            if f hd
            then
                cons hd (g (tail y))
            else
                g (tail y)
    in aux x
in

let init = λsize. λf.
	let aux = rec g. λi.
		if i <= size && size <= i 
		then 
			nil
		else
			cons (f i) (g (i + 1))
	in
	aux 0
in

let iter = λf. λx.
	let aux = rec g. λx.
		if isnil x 
		then 
			nil
		else
            cons (f (head x)) (g (tail x))
	in
	aux x
in

let iteri = λf. λx.
	let aux = rec g. λi. λx.
		if isnil x 
		then 
			nil
		else
            cons (f i (head x)) (g (i + 1) (tail x))
	in
	aux 0 x
in

let square = λx. x * x in

let sqrt = λn. 
    let e = 0.0001 in
    let aux = rec g. λguess. λr.
        if ~((guess * guess - n) <= e)
        then
            let r = n/guess in
            g ((guess + r)/2) r
        else 
            guess
    in
    aux (n/2) 0
in

let absolute = λnumber. 
    if number <= 0 then
        0 - number
    else
        number
in

let pow = λx. λn. 
    let aux = rec f. λp. λacc.
        if (p <= n && n <= p)
        then
            acc
        else 
            f (p + 1) (x * acc)
    in
    aux 0 1
in

let exp = λx.
    let n = 10 in
  
    let aux = rec f. λsum. λn.
        if n <= 0 && 0 <= n
        then
            sum
        else
            f (1 + x * sum/n) (n - 1)
    in 
    aux 1 10 
in

let log = λn. 
    let e = 2.71828 in
    let aux = rec f. λx. λacc. 
        if (x <= e && x + 1 <= e)
        then 
            acc
        else   
            f (x/e) (acc + (1 - 0.71828))
    in
    aux n (0.71828/2)
in

let find_max = rec f. λmax. λv.
    if isnil v
    then 
        max
    else 
        let hd = head v in
        let tl = tail v in
        if max <= hd 
        then 
            f hd tl
        else 
            f max tl
in

let smaller_than = λx. λy.
    x <= y && x + 1 <= y
in

let bigger_than = λx. λy.
    ~(x <= y)
in

let tuple_smaller_than = λx. λy.
    let (fstX , sndX) = x in
    let (fstY , sndY) = y in
    (fstX <= fstY && fstX + 1 <= fstY) || 
        ((fstX <= fstY && fstY <= fstX) && (sndX <= sndY && sndX + 1 <= sndY))
in

let insert = rec f. λcompare. λelem. λls.
    if isnil ls
    then 
        cons elem nil
    else
        let x = head ls in
        let l = tail ls in 
        if compare elem x
        then
            cons elem ls
        else
            cons x (f compare elem l)
in

let add = rec f. λi. λelem. λls.
    if isnil ls
    then 
        cons elem nil
    else
        if i <= 0 && 0 <= i 
        then 
            cons elem ls 
        else
            cons (head ls) (f (i - 1) elem (tail ls))
in

let sort = rec f. λcompare. λls.
    if isnil ls 
    then
        nil
    else 
        let sols = f compare (tail ls) in
        insert compare (head ls) sols
in

let shuffle = λls.
    let len = length ls in
    let nd = map (λc. (generateRandomNumber len) , c) ls in
    let sond = sort tuple_smaller_than nd in
    map (λp. let (_ , rhs) = p in rhs) sond
in

let least_square_loss = λy. λy'.
    square (y - y')
in

let cross_entropy_loss = λy. λy'.
    let y_hat = find_max (0 - 1) y' in
    0 - ((y * (log y_hat)) + (1 - y) * (log (1 - y_hat)))
in

let setVector = rec f. λinput. λdata.
    if (isnil input) && (isnil data)
    then
        unit
    else
        if ~(isnil input) && ~(isnil data)
        then
            let hd_input = head input in
            let hd_data = head data in 
            let _ = set hd_input to hd_data in
            f (tail input) (tail data)
        else
            unit
in

let peekVector = rec f. λinput.
    if isnil input
    then
        nil
    else
        let hd = head input in
        let tl = tail input in
        cons (peek hd) (f tl)
in

let calculate_loss = λinput. λoutput. λdata. λloss_function. λnum_layers.
    let calculate_loss' = rec g. λlen. λacc. λinput. λoutput. λdata. λloss_function. λnum_layers.
      if isnil data 
      then
        acc / len
      else
        let (x , y) = head data in
        let _ = setVector input x in
        let _ = nSteps num_layers in
        let y' = peekVector output in
        g (len + 1) (acc + (loss_function y y')) input output (tail data) loss_function num_layers
    in
    calculate_loss' 0 0 input output data loss_function num_layers
in

let gradient_descent = rec f. λinput. λoutput. λparameters. λloss_function. λdata. λlearning_rate. λepochs. λnum_layers.
    if epochs <= 0 && 0 <= epochs
    then
        false
    else
        let d = 0.001 in
        let g = λe.
            let old = calculate_loss input output data loss_function num_layers in
            let _ = setp parameters to (parameters ⊞ (d ⊠ e)) in
            let new = calculate_loss input output data loss_function num_layers in
            (((old - new) / d) * learning_rate) ⊠ e
        in
        let updated_parameters = fold (λe. λps. (g e) ⊞ ps) parameters in
        let _ = setp parameters to updated_parameters in
        f input output parameters loss_function data learning_rate (epochs - 1) num_layers
in

let dot_product_vectors = λv1. λv2.
    let dot_product' = rec f. λv1'. λv2'. λacc.
        if (isnil v1') || (isnil v2')
        then
            acc
        else    
            let v1h = head v1' in
            let v1tl = tail v1' in
            let v2h = head v2' in
            let v2tl = tail v2' in
            f v1tl v2tl ((v1h * v2h) + acc)
    in
    dot_product' v1 v2 0
in

let dot_product_vector_matrix = rec f. λv. λm.
    if (isnil m)
    then 
        nil
    else
        let v' = head m in
        let m' = tail m in
        let hd = dot_product_vectors v v' in
        let tl = f v m' in
        cons hd tl
in

let add_vectors = rec f. λv1. λv2.
    if (isnil v1) && (isnil v2)
    then 
        nil
    else
        if ~(isnil v1) && ~(isnil v2)
        then
            let hd1 = head v1 in
            let hd2 = head v2 in
            let tl = f (tail v1) (tail v2) in
            cons (hd1 + hd2) tl
        else
            nil
in


let pm = rec f. λn. λm.
    if (n <= 0 && 0 <= n) || (m <= 0 && m <= n)
    then
        nil
    else
        let pv = rec g. λq.
            if q <= 0 && 0 <= q
            then
                nil
            else
                let el = pc 1 in
                cons el (g (q - 1))
        in
        let hd = pv n in
        if m <= 1 && 1 <= m
        then
            hd
        else
            let tl = f n (m - 1) in
            if m <= 2 && 2 <= m
            then
                cons hd (cons tl nil)
            else
                cons hd tl
in

let create_vector_cell = λsize. λval.
    let create_vector_cell' = rec f. λsize.
        if size <= 0 && 0 <= size
        then
            nil
        else
            let el = cell val in
            cons el (f (size - 1))
    in 
    create_vector_cell' size
in 

let create_vector_cell_t = λel. λpos. λsize. λval.
    let create_vector_cell_t' = rec f. λacc. λsize.
        if size <= 0 && 0 <= size
        then
            nil
        else
            let res = f (acc + 1) (size - 1) in
            if acc <= pos && pos <= acc
            then
                cons el res
            else
                let el' = cell val in
                cons el' res
    in 
    create_vector_cell_t' 0 size
in 

let sigmoid = λv.
    let sigmoid' = λx. 
        if ~(x <= 500)
        then
            1
        else
            let e = exp x in
            e / (e + 1)
    in
    map sigmoid' v
in

let softmax = λv.
    let aux = rec f. λsum. λexponents. λw.
        if isnil w
        then 
            sum , exponents
        else
            let hd = head w in
            let tl = tail w in
            let e = exp hd in
            f (sum + e) (cons e exponents) tl
    in
    let (sum , exponents) = aux 0 nil v in
    map (λx. x / sum) exponents
in

let nSteps = rec f. λn.
    if n <= 0 && 0 <= n
    then 
        unit 
    else 
        let _ = step in 
        f (n - 1)
in