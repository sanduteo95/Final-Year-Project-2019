let unit = false in

let square = λx. x * x in

let pair = λx.λy.λp. p x y in
let fst = λp.p (λx.λy.x) in
let snd = λp.p (λx.λy.y) in

let nil = pair true true in
let isnil = fst in
let cons = λh.λt. pair false (pair h t) in
let head = λz. fst (snd z) in
let tail = λz. snd (snd z) in

let nSteps = rec f. λn.
    if n <= 0 && 0 <= n
    then 
        unit 
    else 
        let _ = step in 
        f (n - 1)
in

let least_square_loss = λy. λy'.
    square (y - y')
in

let calculate_loss = λinput. λoutput. λdata. λloss_function. λnum_layers.
    let calculate_loss' = rec g. λlen. λacc. λinput. λoutput. λdata. λloss_function. λnum_layers.
      if isnil data 
      then
        acc / len
      else
        let (x , y) = head data in
        let _ = set input to x in
        let _ = nSteps num_layers in
        let y' = peek output in
        g (len + 1) (acc + (loss_function y y')) input output (tail data) loss_function num_layers
     in
     calculate_loss' 0 0 input output data loss_function num_layers
in

let gradient_descent = rec f. λinput. λoutput. λparameters. λloss_function. λdata. λlearning_rate. λepochs. λnum_layers.
    if epochs <= 0 && 0 <= epochs
    then
      nSteps num_layers
    else
        let d = 0.001 in
        let g = λe.
            let old = calculate_loss input output data loss_function num_layers in
            let _ = setp parameters to (parameters ⊞ (d ⊠ e)) in
            let new = calculate_loss input output data loss_function num_layers in
            (((old - new) / d) * learning_rate) ⊠ e
        in
        let updated_parameters = fold (λe. λps. (g e) ⊞ ps) parameters in
        let _ = setp parameters to updated_parameters in
        f input output parameters loss_function data learning_rate (epochs - 1) num_layers
in

let data = cons (1 , 3) (cons (2 , 4) (cons (3 , 5) (cons (4 , 6) (cons (5 , 7) (cons (6 , 8) nil))))) 
in

let x = cell 0 in
let w = pc 0 in
let b = pc 0 in

let y = w * x + b in
let ps = abs y in 

let learning_rate = 0.001 in
let epochs = 1 in
let num_layers = 1 in

let _ = gradient_descent x y ps least_square_loss data learning_rate epochs num_layers in

let _ = set x to 8 in
let _ = nSteps num_layers in
(peek y , ps)
