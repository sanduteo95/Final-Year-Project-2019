let unit = false in

let square = λx. x * x in

let pair = λx.λy.λp. p x y in
let fst = λp.p (λx.λy.x) in
let snd = λp.p (λx.λy.y) in

let nil = pair true true in
let isnil = fst in
let cons = λh.λt. pair false (pair h t) in
let head = λz. fst (snd z) in
let tail = λz. snd (snd z) in

let pm = rec f. λn. λm.
    if n <= 0 && 0 <= n 
    then
        nil
    else
        let pv = rec g. λq.
            if q <= 0 && 0 <= q
            then
                nil
            else
                let el = pc 1 in
                cons el (g (q - 1))
        in
        if m <= 1 && 1 <= m
        then
            pv n
        else
            cons (pv n) (f n (m - 1))
in

let create_vector_cell = λsize. λval.
    let create_vector_cell' = rec f. λsize.
        if size <= 0 && 0 <= size
        then
            nil
        else
            let el = cell val in
            cons el (f (size - 1))
    in 
    create_vector_cell' size
in 

let dot_product_vectors = λv1. λv2.
    let dot_product' = rec f. λv1'. λv2'. λacc.
        if (isnil v1') || (isnil v2')
        then
            acc
        else    
            let v1h = head v1' in
            let v1tl = tail v1' in
            let v2h = head v2' in
            let v2tl = tail v2' in
            f v1tl v2tl ((v1h * v2h) + acc)
    in
    dot_product' v1 v2 0
in

let least_square_loss = λy. λy'.
    square (y - y')
in

let nSteps = rec f. λn.
    if n <= 0 && 0 <= n
    then 
        unit 
    else 
        let _ = step in 
        f (n - 1)
in

let setVector = rec f. λinput. λdata.
    if (isnil input) && (isnil data)
    then
        unit
    else
        if ~(isnil input) && ~(isnil data)
        then
            let hd_input = head input in
            let hd_data = head data in 
            let _ = set hd_input to hd_data in
            f (tail input) (tail data)
        else
            unit
in

let calculate_loss = λinput. λoutput. λdata. λloss_function. λnum_layers.
    let calculate_loss' = rec g. λlen. λacc. λinput. λoutput. λdata. λloss_function. λnum_layers.
      if isnil data 
      then
        acc / len
      else
        let (x , y) = head data in
        let _ = setVector input x in
        let _ = nSteps num_layers in
        let y' = peek output in
        g (len + 1) (acc + (loss_function y y')) input output (tail data) loss_function num_layers
     in
     calculate_loss' 0 0 input output data loss_function num_layers
in

let gradient_descent = rec f. λinput. λoutput. λparameters. λloss_function. λdata. λlearning_rate. λepochs. λnum_layers.
    if epochs <= 0 && 0 <= epochs
    then
        nSteps num_layers
    else
        let d = 0.001 in
        let g = λe.
            let old = calculate_loss input output data loss_function num_layers in
            let _ = setp parameters to (parameters ⊞ (d ⊠ e)) in
            let new = calculate_loss input output data loss_function num_layers in
            (((old - new) / d) * learning_rate) ⊠ e
        in
        let updated_parameters = fold (λe. λps. (g e) ⊞ ps) parameters in
        let _ = setp parameters to updated_parameters in
        f input output parameters loss_function data learning_rate (epochs - 1) num_layers
in

let data = cons (cons 10.00632 (cons 18 (cons 2.31 (cons 0 (cons 0.538 (cons 6.575 (cons 65.2 (cons 4.09 (cons 1 (cons 296 (cons 15.3 (cons 396.9 (cons 4.98 nil)))))))))))) ,  24) (cons (cons 10.02731 (cons 0 (cons 7.07 (cons 0 (cons 0.469 (cons 6.421 (cons 78.9 (cons 4.9671 (cons 2 (cons 242 (cons 17.8 (cons 396.9 (cons 9.14 nil)))))))))))) ,  21.6) (cons (cons 10.02729 (cons 0 (cons 7.07 (cons 0 (cons 0.469 (cons 7.185 (cons 61.1 (cons 4.9671 (cons 2 (cons 242 (cons 17.8 (cons 392.83 (cons 4.03 nil)))))))))))) ,  34.7) (cons (cons 10.03237 (cons 0 (cons 2.18 (cons 0 (cons 0.458 (cons 6.998 (cons 45.8 (cons 6.0622 (cons 3 (cons 222 (cons 18.7 (cons 394.63 (cons 2.94 nil)))))))))))) ,  33.4) (cons (cons 10.06905 (cons 0 (cons 2.18 (cons 0 (cons 0.458 (cons 7.147 (cons 54.2 (cons 6.0622 (cons 3 (cons 222 (cons 18.7 (cons 396.9 (cons 5.33 nil)))))))))))) ,  36.2) (cons (cons 10.02985 (cons  0 (cons 2.18 (cons 0 (cons 0.458 (cons 6.43 (cons 58.7 (cons 6.0622 (cons 3 (cons 222 (cons 18.7 (cons 394.12 (cons 5.21 nil)))))))))))) ,  28.7) (cons (cons 10.08829 (cons 12.5 (cons 7.87 (cons 0 (cons 0.524 (cons 6.012 (cons 66.6 (cons 5.5605 (cons 5 (cons 311 (cons 15.2 (cons 395.6 (cons 12.43 nil)))))))))))) ,  22.9) (cons (cons 10.14455 (cons 12.5 (cons 7.87 (cons 0 (cons 0.524 (cons 6.172 (cons 96.1 (cons 5.9505 (cons 5 (cons 311 (cons 15.2 (cons 396.9 (cons 19.15 nil)))))))))))) ,  27.1) (cons (cons 10.21124 (cons 12.5 (cons 7.87 (cons 0 (cons 0.524 (cons 5.631 (cons 100 (cons 6.0821 (cons 5 (cons 311 (cons 15.2 (cons 386.63 (cons 29.93 nil)))))))))))) ,  16.5) (cons (cons 10.17004 (cons 12.5 (cons 7.87 (cons 0 (cons 0.524 (cons 6.004 (cons 85.9 (cons 6.5921 (cons 5 (cons 311 (cons 15.2 (cons 386.71 (cons 17.1 nil)))))))))))) ,  18.9) nil)))))))))
in

let input_size = 13 in
let x = create_vector_cell input_size 0 in
let w = pm input_size 1 in 

let y = dot_product_vectors w x in
let ps = abs y in 

let learning_rate = 0.000003 in
let epochs = 1 in
let num_layers = 1 in

let _ = gradient_descent x y ps least_square_loss data learning_rate epochs num_layers in
ps