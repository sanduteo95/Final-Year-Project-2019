let unit = false in

let square = λx. x * x in

let pair = λx.λy.λp. p x y in
let fst = λp.p (λx.λy.x) in
let snd = λp.p (λx.λy.y) in

let nil = pair true true in
let isnil = fst in
let cons = λh.λt. pair false (pair h t) in
let head = λz. fst (snd z) in
let tail = λz. snd (snd z) in

let length = λx.
	let aux = rec g. λacc. λx.
		if isnil x
		then 
			acc
		else
			g (acc + 1) (tail x)
	in aux 0 x
in

let sublist = rec f. λstart. λend. λl.
    if (isnil l) || (end <= start)
    then 
        nil
    else
        if (start <= 0 && 0 <= start) 
        then
            let sublist' = rec g. λend. λl.
                if (end <= 0 && 0 <= end) || (isnil l)
                then
                    nil
                else
                    cons (head l) (g (end - 1) (tail l))
            in
            sublist' end l
        else
            f (start - 1) end (tail l)
in

let nSteps = rec f. λn.
    if n <= 0 && 0 <= n
    then 
        unit 
    else 
        let _ = step in 
        f (n - 1)
in

let pick_slices = rec f. λfirst_model_losses. λsecond_model_losses. λdata.
    if (isnil first_model_losses) && (isnil second_model_losses) && (isnil data)
    then
        nil , nil
    else
        if ~(isnil first_model_losses) && ~(isnil second_model_losses) && ~(isnil data)
        then
            let l1 = head first_model_losses in
            let l2 = head second_model_losses in
            let d = head data in

            let tl1 = tail first_model_losses in 
            let tl2 = tail second_model_losses in 
            let tld = tail data in 

            let (first_slice , second_slice) = f tl1 tl2 tld in
            if (l1 - l2) <= 0
            then
                (cons d first_slice) , second_slice
            else 
                first_slice , (cons d second_slice)
        else
            nil , nil
in

let least_square_loss = λy. λy'.
    square (y - y')
in

let calculate_loss = λinput. λoutput. λdata. λloss_function. λnum_layers.
    let calculate_loss' = rec g. λlen. λacc. λinput. λoutput. λdata. λloss_function. λnum_layers.
      if isnil data 
      then
        acc / len
      else
        let (x , y) = head data in
        let _ = set input to x in
        let _ = nSteps num_layers in
        let y' = peek output in
        g (len + 1) (acc + (loss_function y y')) input output (tail data) loss_function num_layers
     in
     calculate_loss' 0 0 input output data loss_function num_layers
in

let create_loss_values = rec f. λinput. λoutput. λdata. λloss_function. λnum_layers.
    if isnil data 
    then
        nil
    else
        let (x , y) = head data in
        let _ = set input to x in
        let _ = nSteps num_layers in
        let y' = peek output in
        cons (loss_function y y') (f input output (tail data) loss_function num_layers)
in

let gradient_descent = rec f. λinput. λoutput. λparameters. λloss_function. λdata. λlearning_rate. λepochs. λnum_layers.
    if epochs <= 0 && 0 <= epochs
    then
        nSteps num_layers
    else
        let d = 0.001 in
        let g = λe.
            let old = calculate_loss input output data loss_function num_layers in
            let _ = setp parameters to (parameters ⊞ (d ⊠ e)) in
            let new = calculate_loss input output data loss_function num_layers in
            (((old - new) / d) * learning_rate) ⊠ e
        in
        let updated_parameters = fold (λe. λps. (g e) ⊞ ps) parameters in
        let _ = setp parameters to updated_parameters in
        f input output parameters loss_function data learning_rate (epochs - 1) num_layers
in

let fit_lines = rec f. λinput1. λoutput1. λparameters1. λinput2. λoutput2. λparameters2. λloss_function. λdata. λslice1. λslice2. λlearning_rate. λepochs. λmeta_steps. λnum_layers.
    let _ = gradient_descent input1 output1 parameters1 loss_function slice1 learning_rate epochs num_layers in
    let first_model_losses = create_loss_values input1 output1 data loss_function num_layers in

    let _ = gradient_descent input2 output2 parameters2 loss_function slice2 learning_rate epochs num_layers in
	let second_model_losses = create_loss_values input2 output2 data loss_function num_layers in

	if 0 <= meta_steps && meta_steps <= 0
    then 
        unit
	else 
        let (updated_slice1 , updated_slice2) = pick_slices first_model_losses second_model_losses data in
        f input1 output1 parameters1 input2 output2 parameters2 loss_function data updated_slice1 updated_slice2 learning_rate epochs (meta_steps - 1) num_layers
in

let data = cons (0 - 5 , 0 - 4.04441266351276) (cons (0 - 4.9 , 0 - 5.83883116280154) (cons (0 - 4.8 , 0 - 5.57127051890193) (cons (0 - 4.7 , 0 - 6.30347877193981) (cons (0 - 4.6 , 0 - 3.74289247088942) (cons (0 - 4.5 , 0 - 3.78973735961256) (cons (0 - 4.4 , 0 - 5.57432889724265) (cons (0 - 4.3 , 0 - 3.49584959612195) (cons (0 - 4.2 , 0 - 4.77364999991775) (cons (0 - 4.1 , 0 - 3.4708970442915) nil)))))))))
in

let a_1 = pc 0 in
let b_1 = pc 0 in
let x1 = cell 0 in
let y1 = a_1 * x1 + b_1 in
let ps1 = abs y1 in

let a_2 = pc 0 in
let b_2 = pc 0 in
let x2 = cell 0 in
let y2 = a_2 * x2 + b_2 in
let ps2 = abs y2 in

let n = length data in
let slice1 = sublist 0 (n / 2) data in
let slice2 = sublist (n / 2) n data in

let learning_rate = 0.000001 in
let epochs = 1 in
let meta_steps = 0 in
let num_layers = 1 in

let _ = fit_lines x1 y1 ps1 x2 y2 ps2 least_square_loss data slice1 slice2 learning_rate epochs meta_steps num_layers in
ps1 , ps2

