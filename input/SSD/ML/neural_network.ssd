let unit = false in

let exp = λx.
    let n = 10 in
  
    let aux = rec f. λsum. λn.
        if n <= 0 && 0 <= n
        then
            sum
        else
            f (1 + x * sum/n) (n - 1)
    in 
    aux 1 10 
in

let log = λn. 
    let e = 2.71828 in
    let aux = rec f. λx. λacc. 
        if (x <= e && x + 1 <= e)
        then 
            acc
        else   
            f (x/e) (acc + (1 - 0.71828))
    in
    aux n (0.71828/2)
in

let pair = λx.λy.λp. p x y in
let fst = λp.p (λx.λy.x) in
let snd = λp.p (λx.λy.y) in

let nil = pair true true in
let isnil = fst in
let cons = λh.λt. pair false (pair h t) in
let head = λz. fst (snd z) in
let tail = λz. snd (snd z) in

let map = λf. λx.
    let aux = rec g. λx.
        if isnil x 
        then
            nil
        else
            cons (f (head x)) (g (tail x))
    in aux x
in

let nSteps = rec f. λn.
    if n <= 0 && 0 <= n
    then 
        unit 
    else 
        let _ = step in 
        f (n - 1)
in

let sigmoid = λv.
    let sigmoid' = λx. 
        if ~(x <= 500)
        then
            1
        else
            let e = exp x in
            e / (e + 1)
    in
    map sigmoid' v
in

let softmax = λv.
    let aux = rec f. λsum. λexponents. λw.
        if isnil w
        then 
            sum , exponents
        else
            let hd = head w in
            let tl = tail w in
            let e = exp hd in
            f (sum + e) (cons e exponents) tl
    in
    let (sum , exponents) = aux 0 nil v in
    map (λx. x / sum) exponents
in

let pm = rec f. λn. λm.
    if (m <= 0 && 0 <= m)
    then
        nil
    else
        let pv = rec g. λq.
            if q <= 0 && 0 <= q
            then
                nil
            else
                let el = pc 1 in
                cons el (g (q - 1))
        in
        let hd = pv n in
        if m <= 1 && 1 <= m
        then
            hd
        else
            let tl = f n (m - 1) in
            if m <= 2 && 2 <= m
            then
                cons hd (cons tl nil)
            else
                cons hd tl
in

let create_vector_cell = λsize. λval.
    let create_vector_cell' = rec f. λsize.
        if size <= 0 && 0 <= size
        then
            nil
        else
            let el = cell val in
            cons el (f (size - 1))
    in 
    create_vector_cell' size
in 

let dot_product_vectors = λv1. λv2.
    let dot_product' = rec f. λv1'. λv2'. λacc.
        if (isnil v1') || (isnil v2')
        then
            acc
        else    
            let v1h = head v1' in
            let v1tl = tail v1' in
            let v2h = head v2' in
            let v2tl = tail v2' in
            f v1tl v2tl ((v1h * v2h) + acc)
    in
    dot_product' v1 v2 0
in

let dot_product_vector_matrix = rec f. λv. λm.
    if (isnil m)
    then 
        nil
    else
        let v' = head m in
        let m' = tail m in
        let hd = dot_product_vectors v v' in
        let tl = f v m' in
        cons hd tl
in

let find_max = rec f. λmax. λv.
    if isnil v
    then 
        max
    else 
        let hd = head v in
        let tl = tail v in
        if max <= hd 
        then 
            f hd tl
        else 
            f max tl
in

let cross_entropy_loss = λy. λy'.
    let y_hat = find_max (0 - 1) y' in
    0 - ((y * (log y_hat)) + (1 - y) * (log (1 - y_hat)))
in

let setVector = rec f. λinput. λdata.
    if (isnil input) && (isnil data)
    then
        unit
    else
        if ~(isnil input) && ~(isnil data)
        then
            let hd_input = head input in
            let hd_data = head data in 
            let _ = set hd_input to hd_data in
            f (tail input) (tail data)
        else
            unit
in

let peekVector = rec f. λinput.
    if isnil input
    then
        nil
    else
        let hd = head input in
        let tl = tail input in
        cons (peek hd) (f tl)
in

let calculate_loss = λinput. λoutput. λdata. λloss_function. λnum_layers.
    let calculate_loss' = rec g. λlen. λacc. λinput. λoutput. λdata. λloss_function. λnum_layers.
      if isnil data 
      then
        acc / len
      else
        let (x , y) = head data in
        let _ = setVector input x in
        let _ = nSteps num_layers in
        let y' = peekVector output in
        g (len + 1) (acc + (loss_function y y')) input output (tail data) loss_function num_layers
    in
    calculate_loss' 0 0 input output data loss_function num_layers
in

let gradient_descent = rec f. λinput. λoutput. λparameters. λloss_function. λdata. λlearning_rate. λepochs. λnum_layers.
    if epochs <= 0 && 0 <= epochs
    then
        nSteps num_layers
    else
        let d = 0.001 in
        let g = λe.
            let old = calculate_loss input output data loss_function num_layers in
            let _ = setp parameters to (parameters ⊞ (d ⊠ e)) in
            let new = calculate_loss input output data loss_function num_layers in
            (((old - new) / d) * learning_rate) ⊠ e
        in
        let updated_parameters = fold (λe. λps. (g e) ⊞ ps) parameters in
        let _ = setp parameters to updated_parameters in
        f input output parameters loss_function data learning_rate (epochs - 1) num_layers
in

let data = cons (cons 0 (cons 0 (cons 1 nil)) , 0) (cons (cons 1 (cons 1 (cons 1 nil)) , 1) (cons (cons 1 (cons 0 (cons 1 nil)) , 1) (cons (cons 0 (cons 1 (cons 1 nil)) , 0) nil))) in

let input_size = 3 in
let hidden_size = 2 in
let output_size = 2 in

let x = create_vector_cell input_size 0 in

let wxh = pm input_size hidden_size in
let whz = pm hidden_size output_size in

let y = 
    let mulx = dot_product_vector_matrix x wxh in
    let h = sigmoid mulx in
    let mulz = dot_product_vector_matrix h whz in
    softmax mulz
in

let ps = abs y in

let learning_rate = 0.0001 in
let epochs = 1 in
let num_layers = input_size in

let _ = gradient_descent x y ps cross_entropy_loss data learning_rate epochs num_layers in

let _ = setVector x (cons 1 (cons 0 (cons 0 nil))) in
let _ = nSteps num_layers in
let output = peekVector y in 
(find_max (0 - 1) output) , ps