{"version":3,"sources":["/Users/teo/Documents/UNIVERSITY/5th year/Project/viz/CBV-with-CBV-embedding/js/goi-machine.js"],"names":["require","setMachine","graphSet","tokenSet","countSet","graph","token","count","source","lexer","parser","ast","parse","clear","start","addToGroup","child","term","toGraph","link","key","prin","reset","group","box","inner","auxs","i","ctx","length","c","push","name","set","body","param","auxNode","splice","concat","atomNode","createDNet","op","toOp","active","next","sig","eas","das","visited","Number","isInteger","parseInt","graphTxt","linkTxt","flagTxt","finished","node","findNodeByKey","to","nextLink","rewriteFlag","REWRITE","rewrite","pass","setLink","printHistory","play","playing","val","draw","replace","SEARCH","outlinks","findLinksOutOf","RETURN","from","doneVisiting","findLinksInto","j","findJ","links","l","list"],"mappings":"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","sourcesContent":["\nif (global.__abstract) {\n    __assumeDataProperty(global, \"define\", function (name, cb) {\n        result = {};\n        result[name] = global.__optimize(cb);\n        return result;\n    });\n} \nvar graph = null;\n\ndefine('goi-machine',\n\tfunction(require) {\n\t\tvar Flag = require('token').RewriteFlag();\n\n\t\tvar Variable = require('ast/var');\n\t\tvar Operation = require('ast/operation');\n\t\tvar Binding = require('ast/binding');\n\t\tvar Reference = require('ast/reference');\n\t\tvar Thunk = require('ast/thunk');\n\n\t\tvar Lexer = require('parser/lexer');\n\t\tvar Parser = require('parser/parser');\n\n\t\tvar MachineToken = require('token');\n\t\tvar Link = require('link');\n\n\t\tvar Graph = require('graph');\n\t\tvar Group = require('group');\n\t\tvar Term = require('term');\n\n\t\tvar Atom = require('nodes/atom');\n\t\tvar Contract = require('nodes/contract');\n\t\tvar Start = require('nodes/start');\n\t\tvar Op = require('nodes/op');\n\n\t\tvar IntOp = require('nodes/ops/int');\n\t\tvar BoolOp = require('nodes/ops/bool');\n\t\tvar PlusOp = require('nodes/ops/plus');\n\t\tvar TimesOp = require('nodes/ops/times');\n\t\tvar AndOp = require('nodes/ops/and');\n\t\tvar OrOp = require('nodes/ops/or');\n\t\tvar NotOp = require('nodes/ops/not');\n\t\tvar EqualsOp = require('nodes/ops/equals');\n\t\tvar IfOp = require('nodes/ops/if');\n\n\t\tclass GoIMachine {\n\n\t\t\tconstructor() {\n\t\t\t\tthis.setMachine(new Graph(),new MachineToken(),0);\n\t\t\t}\n\n\t\t\tsetMachine(graphSet,tokenSet,countSet) {\n\t\t\t\tthis.graph = graphSet;\n\t\t\t\tgraph = this.graph; // cheating!\n\t\t\t\tthis.token = tokenSet;\n\t\t\t\tthis.count = countSet;\n\t\t\t}\n\n\t\t\tcompile(source) {\n\t\t\t\tconst lexer = new Lexer(source + '\\0');\n\t\t\t\tconst parser = new Parser(lexer);\n\t\t\t\tconst ast = parser.parse();\n\t\t\t\tthis.count = 0;\n\n\t\t\t\tthis.graph.clear();\n\t\t\t\tvar start = new Start().addToGroup(this.graph.child);\n\t\t\t\tvar term = this.toGraph(ast, this.graph.child, false);\n\t\t\t\tvar link = new Link(start.key, term.prin.key, \"_\", \"_\").addToGroup(this.graph.child);\n\t\t\t\tthis.token.reset(link);\n\t\t\t}\n\n\t\t\t// translation\n\t\t\ttoGraph(ast, group) {\n\t\t\t\tvar graph = this.graph;\n\n\t\t\t\tvar term = new Term().addToGroup(group);\n\t\t\t\tif (ast instanceof Thunk) {\n\t\t\t\t\tterm.box();\n\t\t\t\t\tast = ast.inner;\n\t\t\t\t}\n\n\t\t\t\t// VARIABLES & ATOMS\n\t\t\t\tif (ast instanceof Variable) {\n\t\t\t\t\tvar auxs = [];\n\t\t\t\t\tfor (var i = 0; i < ast.ctx.length; i++) {\n\t\t\t\t\t\tvar c = new Contract().addToGroup(term);\n\t\t\t\t\t\tauxs.push(c);\n\t\t\t\t\t\tif ((ast.ctx[i]).name == ast.name)\n\t\t\t\t\t\t \tvar prin = c;\n\t\t\t\t\t}\n\t\t\t\t\tterm.set(prin, auxs);\n\n\t\t\t\t// BINDINGS & REFERENCES\n\t\t\t\t} else if ((ast instanceof Binding) || (ast instanceof Reference))  {\n\t\t\t\t\tvar body = this.toGraph(ast.body, term, false).addToGroup(term);\n\t\t\t\t\tvar param = this.toGraph(ast.param, term, false).addToGroup(term);\n\n\t\t\t\t\tvar auxs = body.auxs;\n\t\t\t\t\tvar auxNode = auxs[0];\n\t\t\t\t\tauxs.splice(0,1)\n\t\t\t\t\tauxs = auxs.concat(param.auxs);\n\n\t\t\t\t\tif (ast instanceof Reference) {\n\t\t\t\t\t\tvar atomNode = new Atom(\"a\").addToGroup(param);\n\t\t\t\t\t\tnew Link(atomNode.key, param.prin.key, \"_\", \"_\").addToGroup(param);\n\t\t\t\t\t\tparam.prin = atomNode;\n\t\t\t\t\t}\n\t\t\t\t\tnew Link(auxNode.key, param.prin.key, \"_\", \"_\").addToGroup(term);\n\n\t\t\t\t\tauxs = Contract.createDNet(ast.ctx.length, auxs, term);\n\t\t\t\t\tterm.set(body.prin, auxs);\n\n\t\t\t\t// OPERATIONS\n\t\t\t\t} else if (ast instanceof Operation) {\n\t\t\t\t\tvar op = this.toOp(ast.name,ast.active).addToGroup(term);\n\n\t\t\t\t\tvar auxs = [];\n\n\t\t\t\t\tvar next;\n\t\t\t\t\tfor (var i = 0; i < ast.sig[0]; i++) {\n\t\t\t\t\t\tnext = this.toGraph(ast.eas[i], term).addToGroup(term);\n\t\t\t\t\t\tnew Link(op.key, next.prin.key, \"_\", \"_\").addToGroup(term);\n\t\t\t\t\t\tauxs = auxs.concat(next.auxs);\n\t\t\t\t\t}\n\t\t\t\t\tfor (var i = 0; i < ast.sig[1]; i++) {\n\t\t\t\t\t\tnext = this.toGraph(ast.das[i], term).addToGroup(term);\n\t\t\t\t\t\tvar link = new Link(op.key, next.prin.key, \"_\", \"_\");\n\t\t\t\t\t\tlink.visited = true; // hacking\n\t\t\t\t\t\tlink.addToGroup(term);\n\t\t\t\t\t\tauxs = auxs.concat(next.auxs);\n\t\t\t\t\t}\n\n\t\t\t\t\tauxs = Contract.createDNet(ast.ctx.length, auxs, term, op);\n\t\t\t\t\tterm.set(op, auxs);\n\t\t\t\t}\n\t\t\t\treturn term;\n\t\t\t}\n\n\t\t\ttoOp(name,active) {\n\t\t\t\tif (Number.isInteger(parseInt(name))) {\n\t\t\t\t\treturn new IntOp(name);\n\t\t\t\t} else if (name == \"true\" || name == \"false\") {\n\t\t\t\t\treturn new BoolOp(name);\n\t\t\t\t} else if (name == \"+\") {\n\t\t\t\t\treturn new PlusOp();\n\t\t\t\t} else if (name == \"*\") {\n\t\t\t\t\treturn new TimesOp();\n\t\t\t\t} else if (name == \"∧\") {\n\t\t\t\t\treturn new AndOp();\n\t\t\t\t} else if (name == \"∨\") {\n\t\t\t\t\treturn new OrOp();\n\t\t\t\t} else if (name == \"¬\") {\n\t\t\t\t\treturn new NotOp();\n\t\t\t\t} else if (name == \"==\") {\n\t\t\t\t\treturn new EqualsOp();\n\t\t\t\t} else if (name == \"if\") {\n\t\t\t\t\treturn new IfOp();\n\t\t\t\t} else {\n\t\t\t\t\treturn new Op(name,active);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tquotieningRules() {\n\t\t\t\t// TODO\n\t\t\t\t// Loop through all links in the graph\n\t\t\t\t// Perform quotiening rules\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// machine step\n\t\t\ttransition(graphTxt, linkTxt, flagTxt) {\n\t\t\t\tif (!finished) {\n\t\t\t\t\tthis.count++;\n\t\t\t\t\tvar node = this.graph.findNodeByKey(this.token.link.to);\n\n\t\t\t\t\tvar nextLink;\n\t\t\t\t\tif (this.token.rewriteFlag == Flag.REWRITE) {\n\t\t\t\t\t\tnextLink = node.rewrite(this.token);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnextLink = this.pass(this.token);\n\t\t\t\t\t}\n\t\t\t\t\tif (nextLink != null) {\n\t\t\t\t\t\tthis.token.setLink(nextLink);\n\t\t\t\t\t\tthis.printHistory(graphTxt, linkTxt, flagTxt);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.token.setLink(null);\n\t\t\t\t\t\tplay = false;\n\t\t\t\t\t\tplaying = false;\n\t\t\t\t\t\tfinished = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprintHistory(graphTxt, linkTxt, flagTxt) {\n\t\t\t\tgraphTxt.val(this.graph.draw().replace(/\\n/g, \"\") + '\\n' + graphTxt.val());\n\t\t\t\tlinkTxt.val(this.token.link + '\\n' + linkTxt.val());\n\t\t\t\tflagTxt.val(this.token.rewriteFlag + '\\n' + flagTxt.val());\n\t\t\t}\n\n\t\tpass(token) { // this needs cleaning up!\n\t\t\tvar link = token.link;\n\t\t\tif (token.rewriteFlag == Flag.SEARCH) {\n\t\t\t\tvar to = this.graph.findNodeByKey(link.to);\n\t\t\t\tvar outlinks = to.findLinksOutOf();\n\t\t\t\tif (to instanceof Atom) {\n\t\t\t\t\ttoken.rewriteFlag = Flag.RETURN;\n\t\t\t\t\treturn link;\n\t\t\t\t} else if (to instanceof Op) {\n\t\t\t\t\tif (outlinks.length == 0) {\n\t\t\t\t\t\tif (to.active) {\n\t\t\t\t\t\t\ttoken.rewriteFlag = Flag.REWRITE;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttoken.rewriteFlag = Flag.RETURN;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn link;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn outlinks[0];\n\t\t\t\t\t}\n\t\t\t\t} else if (to instanceof Contract) {\n\t\t\t\t\ttoken.rewriteFlag = Flag.REWRITE;\n\t\t\t\t\treturn link;\n\t\t\t\t}\n\t\t\t} else if (token.rewriteFlag == Flag.RETURN) {\n\t\t\t\tvar from = this.graph.findNodeByKey(link.from);\n\t\t\t\tvar outlinks = from.findLinksOutOf();\n\t\t\t\tif (this.doneVisiting(link,outlinks)) { // HACKING\n\t\t\t\t\tif (from.active) {\n\t\t\t\t\t\ttoken.rewriteFlag = Flag.REWRITE;\n\t\t\t\t\t\treturn from.findLinksInto()[0];\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttoken.rewriteFlag = Flag.RETURN;\n\t\t\t\t\t\treturn from.findLinksInto()[0];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttoken.rewriteFlag = Flag.SEARCH;\n\t\t\t\t\tvar j = this.findJ(link,outlinks);\n\t\t\t\t\treturn outlinks[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn link;\n\t\t}\n\n\t\tdoneVisiting(link, links) {\n\t\t\tfor (let l of links) {\n\t\t\t\tif ((!l.visited) && (l != link))\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\treturn true;\n\t\t\t}\n\n\t\tfindJ(link,list) {\n\t\t\tfor (var j = 0; j < list.length; j++) {\n\t\t\t\tif ((!list[j].visited) && (list[j] != link))\n\t\t\t\t\treturn j;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t}\n\n\t\treturn GoIMachine;\n\t}\n);\n"]}